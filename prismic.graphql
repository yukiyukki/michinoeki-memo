"""DateTime"""
scalar DateTime

"""Raw JSON value"""
scalar Json

type Meta {
  """The id of the document."""
  id: String!

  """The uid of the document."""
  uid: String

  """The type of the document."""
  type: String!

  """The tags of the document."""
  tags: [String!]!

  """The language of the document."""
  lang: String!

  """Alternate languages the document."""
  alternateLanguages: [RelatedDocument!]!

  """The first publication date of the document."""
  firstPublicationDate: DateTime

  """The last publication date of the document."""
  lastPublicationDate: DateTime
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  _allDocuments(sortBy: SortDocumentsBy, id: String, id_in: [String!], uid: String, uid_in: [String!], lang: String, tags: [String!], tags_in: [String!], type: String, type_in: [String!], firstPublicationDate: DateTime, firstPublicationDate_after: DateTime, firstPublicationDate_before: DateTime, lastPublicationDate: DateTime, lastPublicationDate_after: DateTime, lastPublicationDate_before: DateTime, fulltext: String, similar: similar, before: String, after: String, first: Int, last: Int): _DocumentConnection!
  reports(uid: String!, lang: String!): Reports
  allReportss(sortBy: SortReportsy, id: String, id_in: [String!], uid: String, uid_in: [String!], lang: String, tags: [String!], tags_in: [String!], type: String, type_in: [String!], firstPublicationDate: DateTime, firstPublicationDate_after: DateTime, firstPublicationDate_before: DateTime, lastPublicationDate: DateTime, lastPublicationDate_after: DateTime, lastPublicationDate_before: DateTime, fulltext: String, similar: similar, where: WhereReports, before: String, after: String, first: Int, last: Int): ReportsConnectionConnection!
  report(uid: String!, lang: String!): Report
  allReports(sortBy: SortReporty, id: String, id_in: [String!], uid: String, uid_in: [String!], lang: String, tags: [String!], tags_in: [String!], type: String, type_in: [String!], firstPublicationDate: DateTime, firstPublicationDate_after: DateTime, firstPublicationDate_before: DateTime, lastPublicationDate: DateTime, lastPublicationDate_after: DateTime, lastPublicationDate_before: DateTime, fulltext: String, similar: similar, where: WhereReport, before: String, after: String, first: Int, last: Int): ReportConnectionConnection!
}

type RelatedDocument {
  """The id of the document."""
  id: String!

  """The uid of the document."""
  uid: String

  """The type of the document."""
  type: String!

  """The language of the document."""
  lang: String!
}

type Report implements _Document & _Linkable {
  place_name: Json
  cover_picture: Json
  contents: Json
  description: [ReportDescription!]
  _meta: Meta!
  _linkType: String
}

"""A connection to a list of items."""
type ReportConnectionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ReportConnectionEdge]
  totalCount: Long!
}

"""An edge in a connection."""
type ReportConnectionEdge {
  """The item at the end of the edge."""
  node: Report!

  """A cursor for use in pagination."""
  cursor: String!
}

type ReportDescription {
  ticket_image: Json
  website: _Linkable
  prefecture: String
  city: String
  address: String
  access: String
  open_time: String
  close_time: String
  facilities: String
  activities: String
  restroom: String
  memorial_ticket: String
  other: String
}

type Reports implements _Document & _Linkable {
  place_name: Json
  cover_picture: Json
  contents: Json
  description: [ReportsDescription!]
  _meta: Meta!
  _linkType: String
}

"""A connection to a list of items."""
type ReportsConnectionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ReportsConnectionEdge]
  totalCount: Long!
}

"""An edge in a connection."""
type ReportsConnectionEdge {
  """The item at the end of the edge."""
  node: Reports!

  """A cursor for use in pagination."""
  cursor: String!
}

type ReportsDescription {
  ticket_image: Json
  website: _Linkable
  prefecture: String
  city: String
  address: String
  access: String
  open_time: String
  close_time: String
  facilities: String
  activities: String
  restroom: String
  memorial_ticket: String
  other: String
}

enum SortDocumentsBy {
  meta_firstPublicationDate_ASC
  meta_firstPublicationDate_DESC
  meta_lastPublicationDate_ASC
  meta_lastPublicationDate_DESC
}

enum SortReportsy {
  meta_firstPublicationDate_ASC
  meta_firstPublicationDate_DESC
  meta_lastPublicationDate_ASC
  meta_lastPublicationDate_DESC
  place_name_ASC
  place_name_DESC
  contents_ASC
  contents_DESC
}

enum SortReporty {
  meta_firstPublicationDate_ASC
  meta_firstPublicationDate_DESC
  meta_lastPublicationDate_ASC
  meta_lastPublicationDate_DESC
  place_name_ASC
  place_name_DESC
  contents_ASC
  contents_DESC
}

input WhereReport {
  """place_name"""
  place_name_fulltext: String

  """contents"""
  contents_fulltext: String
}

input WhereReports {
  """place_name"""
  place_name_fulltext: String

  """contents"""
  contents_fulltext: String
}

"""A prismic document"""
interface _Document {
  _meta: Meta!
}

"""A connection to a list of items."""
type _DocumentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [_DocumentEdge]
  totalCount: Long!
}

"""An edge in a connection."""
type _DocumentEdge {
  """The item at the end of the edge."""
  node: _Document!

  """A cursor for use in pagination."""
  cursor: String!
}

"""An external link"""
type _ExternalLink implements _Linkable {
  url: String!
  target: String
  _linkType: String
}

"""A linked file"""
type _FileLink implements _Linkable {
  name: String!
  url: String!
  size: Long!
  _linkType: String
}

"""A linked image"""
type _ImageLink implements _Linkable {
  name: String!
  url: String!
  size: Long!
  height: Int!
  width: Int!
  _linkType: String
}

"""A prismic link"""
interface _Linkable {
  _linkType: String
}

input similar {
  documentId: String!
  max: Int!
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values. Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long
